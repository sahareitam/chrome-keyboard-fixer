name: CI Pipeline

on:
  push:
    branches: [ ci-cd-setup, feature/* ]  # Feature branches only
  pull_request:
    branches: [ master ]  # Only PRs to master

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd cloud-server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black
    
    - name: Lint with flake8
      run: |
        cd cloud-server
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black (optional)
      run: |
        cd cloud-server
        # Make black formatting optional - just warn, don't fail
        black --check --diff . || echo "⚠️ Code formatting could be improved, but this won't fail the build"
    
    - name: Test with pytest (if tests exist)
      run: |
        cd cloud-server
        if [ -f "test_*.py" ] || [ -d "tests" ]; then
          pytest -v
        else
          echo "No tests found - skipping pytest"
        fi

  test-javascript:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install ESLint
      run: |
        npm install -g eslint
    
    - name: Lint JavaScript files
      run: |
        cd extension
        # Basic syntax check for JavaScript files
        for file in *.js; do
          if [ -f "$file" ]; then
            echo "Checking $file"
            node -c "$file"
          fi
        done
    
    - name: Validate manifest.json
      run: |
        cd extension
        # Validate JSON syntax
        python -m json.tool manifest.json > /dev/null && echo "manifest.json is valid"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-extension:
    runs-on: ubuntu-latest
    needs: [test-javascript]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create extension build
      run: |
        cd extension
        # Remove development files if any
        rm -f *.log
        # Create zip for Chrome Web Store
        zip -r ../chrome-extension-build.zip . -x "*.git*" "*.DS_Store*"
    
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension
        path: chrome-extension-build.zip
        retention-days: 30

  check-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for actual sensitive files (relaxed)
      run: |
        # Check for actual credential files
        echo "Scanning for actual credential files..."
        
        # List what's actually in cloud-server for debugging
        echo "Files in cloud-server:"
        ls -la cloud-server/ || true
        
        # Check for service account credential files (specific patterns)
        if find . -name "*service-account*.json" -o -name "*credentials*.json" -o -name "*-key.json" | grep -v ".git" | head -1; then
          echo "Error:  Found credential files!"
          exit 1
        fi
        
        # Check for .env files with actual credentials
        if find . -name ".env" -not -path "*/.git/*" -exec grep -l "GOOGLE_APPLICATION_CREDENTIALS.*\.json" {} \; 2>/dev/null; then
          echo "Error:  Found .env file with credentials path!"
          exit 1
        fi
        
        echo "Success:  No actual credential files detected"